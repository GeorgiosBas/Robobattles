#!/usr/bin/python2
# -*- coding: utf-8 -*-

import sys
import os
import time

dir_path = os.path.dirname(os.path.realpath(__file__))

sys.path.append(dir_path + '/utilities')
sys.path.append(dir_path + '/networking')
sys.path.append(dir_path + '/base')
sys.path.append(dir_path + '/robotBehaviors')
sys.path.append(dir_path + '/robotStates')
sys.path.append(dir_path + '/logic')
sys.path.append(dir_path + '/datatype')

# Base classes
from RobotStateBase import RobotStateBase

# Other libraries
from amqp_common import RpcServer

# Networking
from sf_connectivity import SFConnectivity
from orchestrator_rpc_clients import OrchestratorAPI

# RobotStates
from Constants import *

# Transition Logic
from Transition import Transition
from Condition import Condition
from ConditionGroup import ConditionGroup

# Custom datatypes
from GameVariable import GameVariable

from BonusAcquisition import BonusAcquisition
from CardAcquisition import CardAcquisition
from EnemyCapture import EnemyCapture
from EnemyImmobilization import EnemyImmobilization
from RoundTermination import RoundTermination
from ScoreMultiplication import ScoreMultiplication
from Wandering import Wandering

# RobotBehaviors
from BonusDistanceBehavior import BonusDistanceBehavior
from CardDistanceBehavior import CardDistanceBehavior
from EscapeRoutesBehavior import EscapeRoutesBehavior
from OpponentDistanceBehavior import OpponentDistanceBehavior

class PacmanApp:

	def __init__(self):
		#initialize app status as false
		self.appStatusReady = False

		#initialize orchestrator API
		self.orch_rpc_api = OrchestratorAPI()

		#set up app callbacks
		self.creds = SFConnectivity.APP1_CREDS
		self.conn_params = SFConnectivity.DEFAULT_CONNECTIVITY

		self.play_server = RpcServer(
			'application_1.play',
			on_request = self.play,
			connection_params = self.conn_params,
			creds = self.creds
		)
		self.ready_server = RpcServer(
			'application_1.ready',
			on_request = self.ready,
			connection_params = self.conn_params,
			creds = self.creds
		)

		self.play_server.run_threaded()
		self.ready_server.run_threaded()

		# the type of the player e.g ghost or pacman
		self.playerType = PlayerType.PACMAN

		# declare robot state with id 0
		robotState0 = RobotStateBase(PlayerType.PACMAN, self.orch_rpc_api)
		robotState0.setEverExecuted(True)


		# initialize robot state with id 0 with its behaviors
		robotState0.setBehaviors([])
		# declare robot state with id 1
		robotState1 = BonusAcquisition(PlayerType.PACMAN, self.orch_rpc_api)

		# declare the behaviors of robot state with id 1
		robotBehavior1_6 = BonusDistanceBehavior()
		robotBehavior1_6.setParameters(ImportanceType.NORMAL, BonusDistanceType.TO_CLOSEST_BONUS, self.playerType)
		# declare the behaviors of robot state with id 1
		robotBehavior1_7 = OpponentDistanceBehavior()
		robotBehavior1_7.setParameters(ImportanceType.HIGH, OpponentDistanceType.MAX, self.playerType)

		# initialize robot state with id 1 with its behaviors
		robotState1.setBehaviors([robotBehavior1_6, robotBehavior1_7])
		# declare robot state with id 2
		robotState2 = Wandering(PlayerType.PACMAN, self.orch_rpc_api)

		# declare the behaviors of robot state with id 2
		robotBehavior2_8 = EscapeRoutesBehavior()
		robotBehavior2_8.setParameters(ImportanceType.NORMAL, 2, self.playerType)
		# declare the behaviors of robot state with id 2
		robotBehavior2_9 = OpponentDistanceBehavior()
		robotBehavior2_9.setParameters(ImportanceType.HIGH, OpponentDistanceType.MAX, self.playerType)

		# initialize robot state with id 2 with its behaviors
		robotState2.setBehaviors([robotBehavior2_8, robotBehavior2_9])
		# declare robot state with id 3
		robotState3 = CardAcquisition(PlayerType.PACMAN, self.orch_rpc_api)

		# declare the behaviors of robot state with id 3
		robotBehavior3_10 = CardDistanceBehavior()
		robotBehavior3_10.setParameters(ImportanceType.NORMAL, CardDistanceType.TO_CLOSEST_POINTS, self.playerType)
		# declare the behaviors of robot state with id 3
		robotBehavior3_11 = OpponentDistanceBehavior()
		robotBehavior3_11.setParameters(ImportanceType.HIGH, OpponentDistanceType.MAX, self.playerType)

		# initialize robot state with id 3 with its behaviors
		robotState3.setBehaviors([robotBehavior3_10, robotBehavior3_11])
		# declare robot state with id 4
		robotState4 = EnemyImmobilization(PlayerType.PACMAN, ImmobilizationOptions.FIVE_SECONDS, self.orch_rpc_api)


		# initialize robot state with id 4 with its behaviors
		robotState4.setBehaviors([])

		# declare the Transitions of each state
		transition11 = Transition(robotState1)

		#set state's transitions
		robotState0.setTransitions([transition11])

		transition12 = Transition(robotState3)
		# declare the transition's condition
		condition12_8 = Condition(OperatorType.EQUAL, self.playerType, self.orch_rpc_api)
		leftOp = GameVariable(GameVariableType.UNTAKEN_BONUS)
		rightOp = 0.0
		condition12_8.setOperands(leftOp, rightOp)
		transition12.setCondition(condition12_8)
		transition13 = Transition(robotState4)
		# declare the transition's condition
		condition13_9 = Condition(OperatorType.EQUAL, self.playerType, self.orch_rpc_api)
		leftOp = GameVariable(GameVariableType.MY_BONUS)
		rightOp = 1.0
		condition13_9.setOperands(leftOp, rightOp)
		transition13.setCondition(condition13_9)

		#set state's transitions
		robotState1.setTransitions([transition12, transition13])

		transition14 = Transition(robotState1)
		# declare the transition's condition group
		conditionGroup14_1 = ConditionGroup(BooleanEvaluationType.AND, self.playerType)
		conditions = []
		# declare the condition group's conditions
		condition14_10 = Condition(OperatorType.LOWER, self.playerType, self.orch_rpc_api)
		leftOp = GameVariable(GameVariableType.DIST_TO_CLOSEST_BONUS)
		rightOp = 3.0
		condition14_10.setOperands(leftOp, rightOp)
		condition14_11 = Condition(OperatorType.LOWER_OR_EQUAL, self.playerType, self.orch_rpc_api)
		leftOp = GameVariable(GameVariableType.DIST_TO_OPP)
		rightOp = 4.0
		condition14_11.setOperands(leftOp, rightOp)
		conditionGroup14_1.setConditions([condition14_10, condition14_11])
		transition14.setConditionGroup(conditionGroup14_1)

		#set state's transitions
		robotState2.setTransitions([transition14])

		transition15 = Transition(robotState1)
		# declare the transition's condition
		condition15_12 = Condition(OperatorType.GREATER, self.playerType, self.orch_rpc_api)
		leftOp = GameVariable(GameVariableType.DIST_TO_OPP)
		rightOp = 4.0
		condition15_12.setOperands(leftOp, rightOp)
		transition15.setCondition(condition15_12)
		transition16 = Transition(robotState2)
		# declare the transition's condition
		condition16_13 = Condition(OperatorType.LOWER_OR_EQUAL, self.playerType, self.orch_rpc_api)
		leftOp = GameVariable(GameVariableType.DIST_TO_OPP)
		rightOp = 4.0
		condition16_13.setOperands(leftOp, rightOp)
		transition16.setCondition(condition16_13)

		#set state's transitions
		robotState3.setTransitions([transition15, transition16])

		transition17 = Transition(robotState3)

		#set state's transitions
		robotState4.setTransitions([transition17])


		#set initial robot state
		self.currentRobotState = robotState0

		#set app status to ready
		self.appStatusReady = True


	#callback functionality

	#callback to get the status of the app
	def ready(self, msg, meta):
		return {"ready": self.appStatusReady, "name": 'BITS Please'}

	#callback to instruct the app to play the next move
	def play(self, msg, meta):

		#check if the current state has not yet been executed even once
		if self.currentRobotState.everExecuted() == False:
			self.executeCurrentState()

		#check if a transition of the current state is eligible for execution
		elif self.currentRobotState.checkForEligibleTransition() == True:
			self.currentRobotState = self.currentRobotState.getNextEligibleTransition()
			self.executeCurrentState()		

		else: #execute current state once more
			self.executeCurrentState()

	def reevaluate_internal(self, msg):
		self.orch_rpc_api.reevaluate(
			msg['player_id'],
			msg['calls'],
			msg['depth'],
			msg['strategy'],
			msg['strategy_area'],
			msg['state']
		)

	def useBonus_internal(self, msg):
		self.orch_rpc_api.use_bonus(
			msg['player_id'],
			msg['bonus_type'],
			msg['bonuses_number']
		)

	def executeCurrentState(self):
		print(self.currentRobotState)

		msg = self.currentRobotState.execute()

		if isinstance(self.currentRobotState, EnemyImmobilization):
			self.useBonus_internal(msg)
		elif isinstance(self.currentRobotState, RoundTermination):
			self.useBonus_internal(msg)
		elif isinstance(self.currentRobotState, ScoreMultiplication):
			self.useBonus_internal(msg)
		elif isinstance(self.currentRobotState, BonusAcquisition) or isinstance(self.currentRobotState, CardAcquisition) or isinstance(self.currentRobotState, EnemyCapture) or isinstance(self.currentRobotState, Wandering):
			self.reevaluate_internal(msg)
		else: #it is the start state, so the robot should wait until a transition becomes eligible
			return

if __name__ == "__main__":
	pac = PacmanApp()
	while True:
		try:
			time.sleep(0.01)
		except KeyboardInterrupt:
			break
